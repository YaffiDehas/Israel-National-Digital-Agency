{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\1\\\\Desktop\\\\mini-fullStack-application-main\\\\client\\\\src\\\\components\\\\Table\\\\InfiniteScrollTable.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useCallback } from 'react';\nimport { Table } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst InfiniteScrollTable = _ref => {\n  _s();\n  let {\n    data\n  } = _ref;\n  const [visibleItems, setVisibleItems] = useState(10); // Initial number of visible rows\n  const [hasMore, setHasMore] = useState(true);\n  const observer = useRef(new IntersectionObserver(entries => {\n    const lastEntry = entries[entries.length - 1];\n    if (lastEntry.isIntersecting && hasMore) {\n      setVisibleItems(prevVisibleItems => Math.min(prevVisibleItems + 10, data.length));\n    }\n  }, {\n    threshold: 1\n  } // Trigger when the last row is fully visible\n  ));\n\n  const lastRowRef = useCallback(node => {\n    if (node !== null) {\n      observer.current.observe(node);\n    }\n  }, [observer]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      maxHeight: '400px',\n      overflowY: 'auto'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Table, {\n      striped: true,\n      bordered: true,\n      hover: true,\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Select\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 13\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: data.slice(0, visibleItems).map((item, index) => {\n          if (index === visibleItems - 1) {\n            // Attach a ref to the last row\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              ref: lastRowRef,\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 47,\n                  columnNumber: 21\n                }, this), \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 46,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: item.id\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 49,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: item.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 50,\n                columnNumber: 19\n              }, this)]\n            }, item.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 17\n            }, this);\n          } else {\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 58,\n                  columnNumber: 21\n                }, this), \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 57,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: item.id\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 60,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: item.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 61,\n                columnNumber: 19\n              }, this)]\n            }, item.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 17\n            }, this);\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), hasMore && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading more...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n_s(InfiniteScrollTable, \"/tqWaFdde8qv4nISJxnPtIRYOBM=\");\n_c = InfiniteScrollTable;\nexport default InfiniteScrollTable;\nvar _c;\n$RefreshReg$(_c, \"InfiniteScrollTable\");","map":{"version":3,"names":["React","useState","useRef","useCallback","Table","jsxDEV","_jsxDEV","InfiniteScrollTable","_ref","_s","data","visibleItems","setVisibleItems","hasMore","setHasMore","observer","IntersectionObserver","entries","lastEntry","length","isIntersecting","prevVisibleItems","Math","min","threshold","lastRowRef","node","current","observe","style","maxHeight","overflowY","children","striped","bordered","hover","fileName","_jsxFileName","lineNumber","columnNumber","slice","map","item","index","ref","type","id","name","_c","$RefreshReg$"],"sources":["C:/Users/1/Desktop/mini-fullStack-application-main/client/src/components/Table/InfiniteScrollTable.jsx"],"sourcesContent":["import React, { useState, useRef, useCallback } from 'react';\r\nimport { Table } from 'react-bootstrap';\r\n\r\nconst InfiniteScrollTable = ({ data }) => {\r\n  const [visibleItems, setVisibleItems] = useState(10); // Initial number of visible rows\r\n  const [hasMore, setHasMore] = useState(true);\r\n\r\n  const observer = useRef(\r\n    new IntersectionObserver(\r\n      (entries) => {\r\n        const lastEntry = entries[entries.length - 1];\r\n        if (lastEntry.isIntersecting && hasMore) {\r\n          setVisibleItems((prevVisibleItems) => Math.min(prevVisibleItems + 10, data.length));\r\n        }\r\n      },\r\n      { threshold: 1 } // Trigger when the last row is fully visible\r\n    )\r\n  );\r\n\r\n  const lastRowRef = useCallback(\r\n    (node) => {\r\n      if (node !== null) {\r\n        observer.current.observe(node);\r\n      }\r\n    },\r\n    [observer]\r\n  );\r\n\r\n  return (\r\n    <div style={{ maxHeight: '400px', overflowY: 'auto' }}>\r\n      <Table striped bordered hover>\r\n        <thead>\r\n          <tr>\r\n            <th>Select</th> {/* Checkbox for Multiple Selection */}\r\n            <th>ID</th>\r\n            <th>Name</th>\r\n            {/* ... other table headers ... */}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {data.slice(0, visibleItems).map((item, index) => {\r\n            if (index === visibleItems - 1) {\r\n              // Attach a ref to the last row\r\n              return (\r\n                <tr key={item.id} ref={lastRowRef}>\r\n                  <td>\r\n                    <input type=\"checkbox\" /> {/* Checkbox for Multiple Selection */}\r\n                  </td>\r\n                  <td>{item.id}</td>\r\n                  <td>{item.name}</td>\r\n                  {/* ... other table cells ... */}\r\n                </tr>\r\n              );\r\n            } else {\r\n              return (\r\n                <tr key={item.id}>\r\n                  <td>\r\n                    <input type=\"checkbox\" /> {/* Checkbox for Multiple Selection */}\r\n                  </td>\r\n                  <td>{item.id}</td>\r\n                  <td>{item.name}</td>\r\n                  {/* ... other table cells ... */}\r\n                </tr>\r\n              );\r\n            }\r\n          })}\r\n        </tbody>\r\n      </Table>\r\n\r\n      {hasMore && <p>Loading more...</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InfiniteScrollTable;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}