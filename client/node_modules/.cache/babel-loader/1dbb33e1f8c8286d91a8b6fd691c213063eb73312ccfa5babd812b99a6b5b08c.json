{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\1\\\\Desktop\\\\mini-fullStack-application-main\\\\client\\\\src\\\\components\\\\Table\\\\InfiniteScrollTable.jsx\",\n  _s = $RefreshSig$();\n// InfiniteScrollTable.jsx\nimport React, { useState, useMemo, useRef, useCallback } from 'react';\nimport { Table, Form, Row, Col } from 'react-bootstrap';\nimport ActionsColumnMenu from './ActionsColumnMenu';\nimport Expander from './Expander';\nimport './Style.css'; // Import a separate CSS file for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst InfiniteScrollTable = _ref => {\n  _s();\n  let {\n    data\n  } = _ref;\n  const [visibleItems, setVisibleItems] = useState(10);\n  const [hasMore, setHasMore] = useState(true);\n  const [selectedRows, setSelectedRows] = useState([]);\n  const [sortColumn, setSortColumn] = useState(null);\n  const [sortDirection, setSortDirection] = useState('asc');\n  const [filterValues, setFilterValues] = useState({});\n  const [searchTerm, setSearchTerm] = useState('');\n  const [expandedRows, setExpandedRows] = useState([]);\n  const toggleExpander = id => {\n    setExpandedRows(prevExpandedRows => prevExpandedRows.includes(id) ? prevExpandedRows.filter(rowId => rowId !== id) : [...prevExpandedRows, id]);\n  };\n  const observer = useRef(new IntersectionObserver(entries => {\n    const lastEntry = entries[entries.length - 1];\n    if (lastEntry.isIntersecting && hasMore) {\n      setVisibleItems(prevVisibleItems => Math.min(prevVisibleItems + 10, data.length));\n    }\n  }, {\n    threshold: 1\n  }));\n  const lastRowRef = useCallback(node => {\n    if (node !== null) {\n      observer.current.observe(node);\n    }\n  }, [observer]);\n  const handleCheckboxChange = id => {\n    const updatedSelectedRows = selectedRows.includes(id) ? selectedRows.filter(rowId => rowId !== id) : [...selectedRows, id];\n    setSelectedRows(updatedSelectedRows);\n  };\n  const handleSort = column => {\n    setSortColumn(column);\n    setSortDirection(prevDirection => prevDirection === 'asc' ? 'desc' : 'asc');\n  };\n  const handleFilterChange = (column, value) => {\n    setFilterValues(prevValues => ({\n      ...prevValues,\n      [column]: value\n    }));\n  };\n  const handleSearchChange = value => {\n    setSearchTerm(value);\n  };\n  const filteredAndSortedData = useMemo(() => {\n    let filteredData = data.slice(0, visibleItems).filter(item => Object.entries(filterValues).every(_ref2 => {\n      let [col, filterValue] = _ref2;\n      return filterValue ? String(item[col]).includes(filterValue) : true;\n    }));\n    filteredData = filteredData.filter(item => Object.values(item).some(val => String(val).toLowerCase().includes(searchTerm.toLowerCase())));\n    if (sortColumn) {\n      filteredData.sort((a, b) => {\n        const aValue = a[sortColumn];\n        const bValue = b[sortColumn];\n        const order = sortDirection === 'asc' ? 1 : -1;\n        if (typeof aValue === 'string' && typeof bValue === 'string') {\n          return aValue.localeCompare(bValue) * order;\n        } else {\n          return (aValue - bValue) * order;\n        }\n      });\n    }\n    return filteredData;\n  }, [data, visibleItems, filterValues, sortColumn, sortDirection, searchTerm]);\n  const handleActionMenuClick = action => {\n    // Handle the selected action for the specific row (selectedRow)\n    console.log(`Performing ${action} action for row with ID}`);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"infinite-scroll-table-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"table-scroll\",\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        striped: true,\n        bordered: true,\n        hover: true,\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          className: \"sticky-top\",\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: /*#__PURE__*/_jsxDEV(Form.Check, {\n                type: \"checkbox\",\n                label: \"\",\n                checked: selectedRows.length === visibleItems,\n                onChange: () => handleCheckboxChange('selectAll')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 108,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              onClick: () => handleSort('id'),\n              children: \"ID\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              onClick: () => handleSort('name'),\n              children: \"Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: [filteredAndSortedData.map((item, index) => {\n            if (index === visibleItems - 1) {\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                ref: lastRowRef,\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: /*#__PURE__*/_jsxDEV(Form.Check, {\n                    type: \"checkbox\",\n                    label: \"\",\n                    checked: selectedRows.includes(item.id),\n                    onChange: () => handleCheckboxChange(item.id)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 126,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 125,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: item.id\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 133,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: item.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 134,\n                  columnNumber: 21\n                }, this)]\n              }, item.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 124,\n                columnNumber: 19\n              }, this);\n            } else {\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: /*#__PURE__*/_jsxDEV(Form.Check, {\n                    type: \"checkbox\",\n                    label: \"\",\n                    checked: selectedRows.includes(item.id),\n                    onChange: () => handleCheckboxChange(item.id)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 142,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 141,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: item.id\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 149,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: item.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 150,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: /*#__PURE__*/_jsxDEV(ActionsColumnMenu, {\n                    onMenuItemClick: handleActionMenuClick\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 152,\n                    columnNumber: 13\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 151,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: /*#__PURE__*/_jsxDEV(Expander, {\n                    onExpand: () => toggleExpander(item.id),\n                    expanded: expandedRows.includes(item.id)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 155,\n                    columnNumber: 17\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 154,\n                  columnNumber: 11\n                }, this)]\n              }, item.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 140,\n                columnNumber: 19\n              }, this);\n            }\n          }), expandedRows.includes(item.id) && /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: /*#__PURE__*/_jsxDEV(\"td\", {\n              colSpan: 5,\n              children: item.additionalContent\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      className: \"mt-3\",\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"search\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Search:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"text\",\n            value: searchTerm,\n            onChange: e => handleSearchChange(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      className: \"mb-3\",\n      children: Object.keys(data[0]).map(column => /*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: `filter-${column}`,\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: [column, \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            as: \"select\",\n            value: filterValues[column] || '',\n            onChange: e => handleFilterChange(column, e.target.value),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"All\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 17\n            }, this), Array.from(new Set(data.map(item => item[column]))).map(value => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: value,\n              children: value\n            }, value, false, {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 19\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 13\n        }, this)\n      }, column, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      className: \"mb-3\",\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"mr-2\",\n            children: \"Sort by:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 13\n          }, this), Object.keys(data[0]).map(column => /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"cursor-pointer\",\n            onClick: () => handleSort(column),\n            children: [column, ' ', sortColumn === column && (sortDirection === 'asc' ? '▲' : '▼')]\n          }, column, true, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n_s(InfiniteScrollTable, \"QTvsGxPUCkhOytL8xDecz3vjoso=\");\n_c = InfiniteScrollTable;\nexport default InfiniteScrollTable;\nvar _c;\n$RefreshReg$(_c, \"InfiniteScrollTable\");","map":{"version":3,"names":["React","useState","useMemo","useRef","useCallback","Table","Form","Row","Col","ActionsColumnMenu","Expander","jsxDEV","_jsxDEV","InfiniteScrollTable","_ref","_s","data","visibleItems","setVisibleItems","hasMore","setHasMore","selectedRows","setSelectedRows","sortColumn","setSortColumn","sortDirection","setSortDirection","filterValues","setFilterValues","searchTerm","setSearchTerm","expandedRows","setExpandedRows","toggleExpander","id","prevExpandedRows","includes","filter","rowId","observer","IntersectionObserver","entries","lastEntry","length","isIntersecting","prevVisibleItems","Math","min","threshold","lastRowRef","node","current","observe","handleCheckboxChange","updatedSelectedRows","handleSort","column","prevDirection","handleFilterChange","value","prevValues","handleSearchChange","filteredAndSortedData","filteredData","slice","item","Object","every","_ref2","col","filterValue","String","values","some","val","toLowerCase","sort","a","b","aValue","bValue","order","localeCompare","handleActionMenuClick","action","console","log","className","children","striped","bordered","hover","Check","type","label","checked","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","index","ref","name","onMenuItemClick","onExpand","expanded","colSpan","additionalContent","Group","controlId","Label","Control","e","target","keys","as","Array","from","Set","_c","$RefreshReg$"],"sources":["C:/Users/1/Desktop/mini-fullStack-application-main/client/src/components/Table/InfiniteScrollTable.jsx"],"sourcesContent":["// InfiniteScrollTable.jsx\r\nimport React, { useState, useMemo, useRef, useCallback } from 'react';\r\nimport { Table, Form, Row, Col,  } from 'react-bootstrap';\r\nimport ActionsColumnMenu from './ActionsColumnMenu';\r\nimport Expander from './Expander';\r\nimport './Style.css'; // Import a separate CSS file for styling\r\n\r\nconst InfiniteScrollTable = ({ data }) => {\r\n  const [visibleItems, setVisibleItems] = useState(10);\r\n  const [hasMore, setHasMore] = useState(true);\r\n  const [selectedRows, setSelectedRows] = useState([]);\r\n  const [sortColumn, setSortColumn] = useState(null);\r\n  const [sortDirection, setSortDirection] = useState('asc');\r\n  const [filterValues, setFilterValues] = useState({});\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [expandedRows, setExpandedRows] = useState([]);\r\n\r\n  const toggleExpander = (id) => {\r\n    setExpandedRows((prevExpandedRows) =>\r\n      prevExpandedRows.includes(id)\r\n        ? prevExpandedRows.filter((rowId) => rowId !== id)\r\n        : [...prevExpandedRows, id]\r\n    );\r\n  };\r\n  const observer = useRef(\r\n    new IntersectionObserver(\r\n      (entries) => {\r\n        const lastEntry = entries[entries.length - 1];\r\n        if (lastEntry.isIntersecting && hasMore) {\r\n          setVisibleItems((prevVisibleItems) => Math.min(prevVisibleItems + 10, data.length));\r\n        }\r\n      },\r\n      { threshold: 1 }\r\n    )\r\n  );\r\n\r\n  const lastRowRef = useCallback(\r\n    (node) => {\r\n      if (node !== null) {\r\n        observer.current.observe(node);\r\n      }\r\n    },\r\n    [observer]\r\n  );\r\n\r\n  const handleCheckboxChange = (id) => {\r\n    const updatedSelectedRows = selectedRows.includes(id)\r\n      ? selectedRows.filter((rowId) => rowId !== id)\r\n      : [...selectedRows, id];\r\n    setSelectedRows(updatedSelectedRows);\r\n  };\r\n\r\n  const handleSort = (column) => {\r\n    setSortColumn(column);\r\n    setSortDirection((prevDirection) => (prevDirection === 'asc' ? 'desc' : 'asc'));\r\n  };\r\n\r\n  const handleFilterChange = (column, value) => {\r\n    setFilterValues((prevValues) => ({ ...prevValues, [column]: value }));\r\n  };\r\n\r\n  const handleSearchChange = (value) => {\r\n    setSearchTerm(value);\r\n  };\r\n\r\n  const filteredAndSortedData = useMemo(() => {\r\n    let filteredData = data.slice(0, visibleItems).filter((item) =>\r\n      Object.entries(filterValues).every(([col, filterValue]) =>\r\n        filterValue ? String(item[col]).includes(filterValue) : true\r\n      )\r\n    );\r\n\r\n    filteredData = filteredData.filter((item) =>\r\n      Object.values(item).some((val) =>\r\n        String(val).toLowerCase().includes(searchTerm.toLowerCase())\r\n      )\r\n    );\r\n\r\n    if (sortColumn) {\r\n      filteredData.sort((a, b) => {\r\n        const aValue = a[sortColumn];\r\n        const bValue = b[sortColumn];\r\n        const order = sortDirection === 'asc' ? 1 : -1;\r\n\r\n        if (typeof aValue === 'string' && typeof bValue === 'string') {\r\n          return aValue.localeCompare(bValue) * order;\r\n        } else {\r\n          return (aValue - bValue) * order;\r\n        }\r\n      });\r\n    }\r\n\r\n    return filteredData;\r\n  }, [data, visibleItems, filterValues, sortColumn, sortDirection, searchTerm]);\r\n\r\n  const handleActionMenuClick = (action) => {\r\n    // Handle the selected action for the specific row (selectedRow)\r\n    console.log(`Performing ${action} action for row with ID}`);\r\n  };\r\n\r\n  return (\r\n    <div className=\"infinite-scroll-table-container\">\r\n      <div className=\"table-scroll\">\r\n        <Table striped bordered hover>\r\n          <thead className=\"sticky-top\">\r\n            <tr>\r\n              <th>\r\n                <Form.Check\r\n                  type=\"checkbox\"\r\n                  label=\"\"\r\n                  checked={selectedRows.length === visibleItems}\r\n                  onChange={() => handleCheckboxChange('selectAll')}\r\n                />\r\n              </th>\r\n              <th onClick={() => handleSort('id')}>ID</th>\r\n              <th onClick={() => handleSort('name')}>Name</th>\r\n              {/* ... other table headers ... */}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {filteredAndSortedData.map((item, index) => {\r\n              if (index === visibleItems - 1) {\r\n                return (\r\n                  <tr key={item.id} ref={lastRowRef}>\r\n                    <td>\r\n                      <Form.Check\r\n                        type=\"checkbox\"\r\n                        label=\"\"\r\n                        checked={selectedRows.includes(item.id)}\r\n                        onChange={() => handleCheckboxChange(item.id)}\r\n                      />\r\n                    </td>\r\n                    <td>{item.id}</td>\r\n                    <td>{item.name}</td>\r\n                    {/* ... other table cells ... */}\r\n                  </tr>\r\n                );\r\n              } else {\r\n                return (\r\n                  <tr key={item.id}>\r\n                    <td>\r\n                      <Form.Check\r\n                        type=\"checkbox\"\r\n                        label=\"\"\r\n                        checked={selectedRows.includes(item.id)}\r\n                        onChange={() => handleCheckboxChange(item.id)}\r\n                      />\r\n                    </td>\r\n                    <td>{item.id}</td>\r\n                    <td>{item.name}</td>\r\n                    <td>\r\n            <ActionsColumnMenu onMenuItemClick={handleActionMenuClick} />\r\n          </td>\r\n          <td>\r\n                <Expander\r\n                  onExpand={() => toggleExpander(item.id)}\r\n                  expanded={expandedRows.includes(item.id)}\r\n                />\r\n                </td>\r\n                  </tr>\r\n                );\r\n              }\r\n            })}\r\n            {expandedRows.includes(item.id) && (\r\n              <tr>\r\n                <td colSpan={5}>\r\n                  {/* Additional content for the expanded row */}\r\n                  {item.additionalContent}\r\n                </td>\r\n              </tr>\r\n            )}\r\n          </tbody>\r\n        </Table>\r\n      </div>\r\n\r\n      {/* Search Bar */}\r\n      <Row className=\"mt-3\">\r\n        <Col>\r\n          <Form.Group controlId=\"search\">\r\n            <Form.Label>Search:</Form.Label>\r\n            <Form.Control\r\n              type=\"text\"\r\n              value={searchTerm}\r\n              onChange={(e) => handleSearchChange(e.target.value)}\r\n            />\r\n          </Form.Group>\r\n        </Col>\r\n      </Row>\r\n\r\n      {/* Filter Dropdowns */}\r\n      <Row className=\"mb-3\">\r\n        {Object.keys(data[0]).map((column) => (\r\n          <Col key={column}>\r\n            <Form.Group controlId={`filter-${column}`}>\r\n              <Form.Label>{column}:</Form.Label>\r\n              <Form.Control\r\n                as=\"select\"\r\n                value={filterValues[column] || ''}\r\n                onChange={(e) => handleFilterChange(column, e.target.value)}\r\n              >\r\n                <option value=\"\">All</option>\r\n                {Array.from(new Set(data.map((item) => item[column]))).map((value) => (\r\n                  <option key={value} value={value}>\r\n                    {value}\r\n                  </option>\r\n                ))}\r\n              </Form.Control>\r\n            </Form.Group>\r\n          </Col>\r\n        ))}\r\n      </Row>\r\n\r\n      {/* Sort Indicator */}\r\n      <Row className=\"mb-3\">\r\n        <Col>\r\n          <div>\r\n            <span className=\"mr-2\">Sort by:</span>\r\n            {Object.keys(data[0]).map((column) => (\r\n              <span\r\n                key={column}\r\n                className=\"cursor-pointer\"\r\n                onClick={() => handleSort(column)}\r\n              >\r\n                {column}{' '}\r\n                {sortColumn === column && (sortDirection === 'asc' ? '▲' : '▼')}\r\n              </span>\r\n            ))}\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InfiniteScrollTable;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}