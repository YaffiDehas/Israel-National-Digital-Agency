{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\1\\\\Desktop\\\\mini-fullStack-application-main\\\\client\\\\src\\\\components\\\\Table\\\\InfiniteScrollTable.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useMemo, useRef, useEffect, useCallback } from 'react';\nimport { Table, Form } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport ActionsColumnMenu from './ActionsColumnMenu';\nimport Expander from './Expander';\nimport ShowMore from './ShowMore';\nimport Search from './Search';\nimport './Style.css'; // Import a separate CSS file for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst InfiniteScrollTable = _ref => {\n  _s();\n  let {\n    data\n  } = _ref;\n  const [visibleItems, setVisibleItems] = useState(10);\n  const [hasMore, setHasMore] = useState(true);\n  const [selectedRows, setSelectedRows] = useState([]);\n  const [sortColumn, setSortColumn] = useState(null);\n  const [sortDirection, setSortDirection] = useState('asc');\n  const [filterValues, setFilterValues] = useState({});\n  const [searchTerm, setSearchTerm] = useState('');\n  const [expandedRows, setExpandedRows] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [visibleRows, setVisibleRows] = useState(5); // Number of initially visible rows\n  const [totalRows] = useState(20); // Total number of rows\n\n  const tableRef = useRef(null);\n  useEffect(() => {\n    const observer = new IntersectionObserver(entries => {\n      entries.forEach(entry => {\n        if (entry.isIntersecting && !loading && visibleRows < totalRows) {\n          // Load more rows when the last row becomes visible\n          setLoading(true);\n          setTimeout(() => {\n            // Simulate data fetching delay\n            setVisibleRows(prevVisibleRows => Math.min(prevVisibleRows + 10, totalRows));\n            setLoading(false);\n          }, 1000);\n        }\n      });\n    }, {\n      root: null,\n      rootMargin: '0px',\n      threshold: 0.5 // Trigger when 50% of the element is visible\n    });\n\n    if (tableRef.current) {\n      observer.observe(tableRef.current);\n    }\n    return () => {\n      // Cleanup the observer\n      observer.disconnect();\n    };\n  }, [visibleRows, totalRows, loading]);\n  const observer = useRef(new IntersectionObserver(entries => {\n    const lastEntry = entries[entries.length - 1];\n    if (lastEntry.isIntersecting && hasMore) {\n      setVisibleItems(prevVisibleItems => Math.min(prevVisibleItems + 10, data.length));\n    }\n  }, {\n    threshold: 1\n  }));\n  const lastRowRef = useCallback(node => {\n    if (node !== null) {\n      observer.current.observe(node);\n    }\n  }, [observer]);\n  const handleCheckboxChange = id => {\n    const updatedSelectedRows = selectedRows.includes(id) ? selectedRows.filter(rowId => rowId !== id) : [...selectedRows, id];\n    setSelectedRows(updatedSelectedRows);\n  };\n  const handleSort = column => {\n    setSortColumn(column);\n    setSortDirection(prevDirection => prevDirection === 'asc' ? 'desc' : 'asc');\n  };\n  const handleFilterChange = (column, value) => {\n    setFilterValues(prevValues => ({\n      ...prevValues,\n      [column]: value\n    }));\n  };\n  const handleSearchChange = value => {\n    setSearchTerm(value);\n  };\n  const filteredAndSortedData = useMemo(() => {\n    let filteredData = data.slice(0, visibleItems).filter(item => Object.entries(filterValues).every(_ref2 => {\n      let [col, filterValue] = _ref2;\n      return filterValue ? String(item[col]).includes(filterValue) : true;\n    }));\n    filteredData = filteredData.filter(item => Object.values(item).some(val => String(val).toLowerCase().includes(searchTerm.toLowerCase())));\n    if (sortColumn) {\n      filteredData.sort((a, b) => {\n        const aValue = a[sortColumn];\n        const bValue = b[sortColumn];\n        const order = sortDirection === 'asc' ? 1 : -1;\n        if (typeof aValue === 'string' && typeof bValue === 'string') {\n          return aValue.localeCompare(bValue) * order;\n        } else {\n          return (aValue - bValue) * order;\n        }\n      });\n    }\n    return filteredData;\n  }, [data, visibleItems, filterValues, sortColumn, sortDirection, searchTerm]);\n  const handleActionMenuClick = action => {\n    // Handle the selected action for the specific row (selectedRow)\n    console.log(`Performing ${action} action for row with ID}`);\n  };\n  const handleShowMore = () => {\n    // Increase the number of visible rows when 'Show More' is clicked\n    setVisibleRows(prevVisibleRows => prevVisibleRows + 10);\n  };\n  const toggleExpander = id => {\n    setExpandedRows(prevExpandedRows => prevExpandedRows.includes(id) ? prevExpandedRows.filter(rowId => rowId !== id) : [...prevExpandedRows, id]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"infinite-scroll-table-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"table-scroll\",\n      ref: tableRef,\n      children: [/*#__PURE__*/_jsxDEV(Table, {\n        striped: true,\n        bordered: true,\n        hover: true,\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          className: \"sticky-top\",\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: /*#__PURE__*/_jsxDEV(Form.Check, {\n                type: \"checkbox\",\n                label: \"\",\n                checked: selectedRows.length === visibleItems,\n                onChange: () => handleCheckboxChange('selectAll')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 152,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              onClick: () => handleSort('id'),\n              children: \"ID\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              onClick: () => handleSort('name'),\n              children: \"Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: filteredAndSortedData.slice(0, visibleRows).map((item, index) => {\n            if (index === visibleItems - 1) {\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                ref: lastRowRef,\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: /*#__PURE__*/_jsxDEV(Form.Check, {\n                    type: \"checkbox\",\n                    label: \"\",\n                    checked: selectedRows.includes(item.id),\n                    onChange: () => handleCheckboxChange(item.id)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 170,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 169,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: item.id\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 177,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: item.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 178,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: /*#__PURE__*/_jsxDEV(Link, {\n                    to: item.drillLink,\n                    children: item.id\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 180,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 179,\n                  columnNumber: 21\n                }, this)]\n              }, item.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 168,\n                columnNumber: 19\n              }, this);\n            } else {\n              return /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(Form.Check, {\n                      type: \"checkbox\",\n                      label: \"\",\n                      checked: selectedRows.includes(item.id),\n                      onChange: () => handleCheckboxChange(item.id)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 190,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 189,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: item.id\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 197,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: item.name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 198,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(ActionsColumnMenu, {\n                      onMenuItemClick: handleActionMenuClick\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 200,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 199,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(Expander, {\n                      onExpand: () => toggleExpander(item.id),\n                      expanded: expandedRows.includes(item.id)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 203,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 202,\n                    columnNumber: 23\n                  }, this)]\n                }, item.id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 188,\n                  columnNumber: 21\n                }, this), expandedRows.includes(item.id) && /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: /*#__PURE__*/_jsxDEV(\"td\", {\n                    colSpan: 5,\n                    children: item.additionalContent\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 211,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 210,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true);\n            }\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this), loading && /*#__PURE__*/_jsxDEV(\"tfoot\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: /*#__PURE__*/_jsxDEV(\"td\", {\n            colSpan: 4,\n            children: \"Loading more...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Search, {\n      data: data,\n      handleSearchChange: handleSearchChange,\n      handleFilterChange: handleFilterChange,\n      handleSort: handleSort,\n      searchTerm: searchTerm,\n      filterValues: filterValues,\n      sortDirection: sortDirection,\n      sortColumn: sortColumn\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 7\n    }, this), visibleRows < totalRows && /*#__PURE__*/_jsxDEV(ShowMore, {\n      handleShowMore: handleShowMore\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 5\n  }, this);\n};\n_s(InfiniteScrollTable, \"6Ztbsrnc+BsgxRaCLf+lkUu0ySQ=\");\n_c = InfiniteScrollTable;\nexport default InfiniteScrollTable;\nvar _c;\n$RefreshReg$(_c, \"InfiniteScrollTable\");","map":{"version":3,"names":["React","useState","useMemo","useRef","useEffect","useCallback","Table","Form","Link","ActionsColumnMenu","Expander","ShowMore","Search","jsxDEV","_jsxDEV","Fragment","_Fragment","InfiniteScrollTable","_ref","_s","data","visibleItems","setVisibleItems","hasMore","setHasMore","selectedRows","setSelectedRows","sortColumn","setSortColumn","sortDirection","setSortDirection","filterValues","setFilterValues","searchTerm","setSearchTerm","expandedRows","setExpandedRows","loading","setLoading","visibleRows","setVisibleRows","totalRows","tableRef","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","setTimeout","prevVisibleRows","Math","min","root","rootMargin","threshold","current","observe","disconnect","lastEntry","length","prevVisibleItems","lastRowRef","node","handleCheckboxChange","id","updatedSelectedRows","includes","filter","rowId","handleSort","column","prevDirection","handleFilterChange","value","prevValues","handleSearchChange","filteredAndSortedData","filteredData","slice","item","Object","every","_ref2","col","filterValue","String","values","some","val","toLowerCase","sort","a","b","aValue","bValue","order","localeCompare","handleActionMenuClick","action","console","log","handleShowMore","toggleExpander","prevExpandedRows","className","children","ref","striped","bordered","hover","Check","type","label","checked","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","index","name","to","drillLink","onMenuItemClick","onExpand","expanded","colSpan","additionalContent","_c","$RefreshReg$"],"sources":["C:/Users/1/Desktop/mini-fullStack-application-main/client/src/components/Table/InfiniteScrollTable.jsx"],"sourcesContent":["import React, { useState, useMemo, useRef, useEffect, useCallback } from 'react';\r\nimport { Table, Form, } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport ActionsColumnMenu from './ActionsColumnMenu';\r\nimport Expander from './Expander';\r\nimport ShowMore from './ShowMore';\r\nimport Search from './Search';\r\nimport './Style.css'; // Import a separate CSS file for styling\r\n\r\nconst InfiniteScrollTable = ({ data }) => {\r\n  const [visibleItems, setVisibleItems] = useState(10);\r\n  const [hasMore, setHasMore] = useState(true);\r\n  const [selectedRows, setSelectedRows] = useState([]);\r\n  const [sortColumn, setSortColumn] = useState(null);\r\n  const [sortDirection, setSortDirection] = useState('asc');\r\n  const [filterValues, setFilterValues] = useState({});\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [expandedRows, setExpandedRows] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [visibleRows, setVisibleRows] = useState(5); // Number of initially visible rows\r\n  const [totalRows] = useState(20); // Total number of rows\r\n\r\n  const tableRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const observer = new IntersectionObserver(\r\n      (entries) => {\r\n        entries.forEach((entry) => {\r\n          if (entry.isIntersecting && !loading && visibleRows < totalRows) {\r\n            // Load more rows when the last row becomes visible\r\n            setLoading(true);\r\n            setTimeout(() => {\r\n              // Simulate data fetching delay\r\n              setVisibleRows((prevVisibleRows) => Math.min(prevVisibleRows + 10, totalRows));\r\n              setLoading(false);\r\n            }, 1000);\r\n          }\r\n        });\r\n      },\r\n      {\r\n        root: null,\r\n        rootMargin: '0px',\r\n        threshold: 0.5, // Trigger when 50% of the element is visible\r\n      }\r\n    );\r\n\r\n    if (tableRef.current) {\r\n      observer.observe(tableRef.current);\r\n    }\r\n\r\n    return () => {\r\n      // Cleanup the observer\r\n      observer.disconnect();\r\n    };\r\n  }, [visibleRows, totalRows, loading]);\r\n\r\n  const observer = useRef(\r\n    new IntersectionObserver(\r\n      (entries) => {\r\n        const lastEntry = entries[entries.length - 1];\r\n        if (lastEntry.isIntersecting && hasMore) {\r\n          setVisibleItems((prevVisibleItems) => Math.min(prevVisibleItems + 10, data.length));\r\n        }\r\n      },\r\n      { threshold: 1 }\r\n    )\r\n  );\r\n\r\n  const lastRowRef = useCallback(\r\n    (node) => {\r\n      if (node !== null) {\r\n        observer.current.observe(node);\r\n      }\r\n    },\r\n    [observer]\r\n  );\r\n\r\n  const handleCheckboxChange = (id) => {\r\n    const updatedSelectedRows = selectedRows.includes(id)\r\n      ? selectedRows.filter((rowId) => rowId !== id)\r\n      : [...selectedRows, id];\r\n    setSelectedRows(updatedSelectedRows);\r\n  };\r\n\r\n  const handleSort = (column) => {\r\n    setSortColumn(column);\r\n    setSortDirection((prevDirection) => (prevDirection === 'asc' ? 'desc' : 'asc'));\r\n  };\r\n\r\n  const handleFilterChange = (column, value) => {\r\n    setFilterValues((prevValues) => ({ ...prevValues, [column]: value }));\r\n  };\r\n\r\n  const handleSearchChange = (value) => {\r\n    setSearchTerm(value);\r\n  };\r\n\r\n  const filteredAndSortedData = useMemo(() => {\r\n    let filteredData = data.slice(0, visibleItems).filter((item) =>\r\n      Object.entries(filterValues).every(([col, filterValue]) =>\r\n        filterValue ? String(item[col]).includes(filterValue) : true\r\n      )\r\n    );\r\n\r\n    filteredData = filteredData.filter((item) =>\r\n      Object.values(item).some((val) =>\r\n        String(val).toLowerCase().includes(searchTerm.toLowerCase())\r\n      )\r\n    );\r\n\r\n    if (sortColumn) {\r\n      filteredData.sort((a, b) => {\r\n        const aValue = a[sortColumn];\r\n        const bValue = b[sortColumn];\r\n        const order = sortDirection === 'asc' ? 1 : -1;\r\n\r\n        if (typeof aValue === 'string' && typeof bValue === 'string') {\r\n          return aValue.localeCompare(bValue) * order;\r\n        } else {\r\n          return (aValue - bValue) * order;\r\n        }\r\n      });\r\n    }\r\n\r\n    return filteredData;\r\n  }, [data, visibleItems, filterValues, sortColumn, sortDirection, searchTerm]);\r\n\r\n  const handleActionMenuClick = (action) => {\r\n    // Handle the selected action for the specific row (selectedRow)\r\n    console.log(`Performing ${action} action for row with ID}`);\r\n  };\r\n\r\n  const handleShowMore = () => {\r\n    // Increase the number of visible rows when 'Show More' is clicked\r\n    setVisibleRows((prevVisibleRows) => prevVisibleRows + 10);\r\n  };\r\n  const toggleExpander = (id) => {\r\n    setExpandedRows((prevExpandedRows) =>\r\n      prevExpandedRows.includes(id)\r\n        ? prevExpandedRows.filter((rowId) => rowId !== id)\r\n        : [...prevExpandedRows, id]\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"infinite-scroll-table-container\">\r\n      <div className=\"table-scroll\" ref={tableRef}>\r\n        <Table striped bordered hover>\r\n          <thead className=\"sticky-top\">\r\n            <tr>\r\n              <th>\r\n                <Form.Check\r\n                  type=\"checkbox\"\r\n                  label=\"\"\r\n                  checked={selectedRows.length === visibleItems}\r\n                  onChange={() => handleCheckboxChange('selectAll')}\r\n                />\r\n              </th>\r\n              <th onClick={() => handleSort('id')}>ID</th>\r\n              <th onClick={() => handleSort('name')}>Name</th>\r\n              {/* ... other table headers ... */}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {filteredAndSortedData.slice(0, visibleRows).map((item, index) => {\r\n              if (index === visibleItems - 1) {\r\n                return (\r\n                  <tr key={item.id} ref={lastRowRef}>\r\n                    <td>\r\n                      <Form.Check\r\n                        type=\"checkbox\"\r\n                        label=\"\"\r\n                        checked={selectedRows.includes(item.id)}\r\n                        onChange={() => handleCheckboxChange(item.id)}\r\n                      />\r\n                    </td>\r\n                    <td>{item.id}</td>\r\n                    <td>{item.name}</td>\r\n                    <td>\r\n                      <Link to={item.drillLink}>{item.id}</Link>\r\n                    </td>\r\n                    {/* ... other table cells ... */}\r\n                  </tr>\r\n                );\r\n              } else {\r\n                return (\r\n                  <>\r\n                    <tr key={item.id}>\r\n                      <td>\r\n                        <Form.Check\r\n                          type=\"checkbox\"\r\n                          label=\"\"\r\n                          checked={selectedRows.includes(item.id)}\r\n                          onChange={() => handleCheckboxChange(item.id)}\r\n                        />\r\n                      </td>\r\n                      <td>{item.id}</td>\r\n                      <td>{item.name}</td>\r\n                      <td>\r\n                        <ActionsColumnMenu onMenuItemClick={handleActionMenuClick} />\r\n                      </td>\r\n                      <td>\r\n                        <Expander\r\n                          onExpand={() => toggleExpander(item.id)}\r\n                          expanded={expandedRows.includes(item.id)}\r\n                        />\r\n                      </td>\r\n                    </tr>\r\n                    {expandedRows.includes(item.id) && (\r\n                      <tr>\r\n                        <td colSpan={5}>\r\n                          {/* Additional content for the expanded row */}\r\n                          {item.additionalContent}\r\n                        </td>\r\n                      </tr>\r\n                    )}\r\n                  </>\r\n                );\r\n              }\r\n            })}\r\n          </tbody>\r\n         \r\n        </Table>\r\n        {loading && (\r\n            <tfoot>\r\n              <tr>\r\n                <td colSpan={4}>Loading more...</td>\r\n              </tr>\r\n            </tfoot>\r\n          )}\r\n      </div>\r\n      <Search\r\n        data={data}\r\n        handleSearchChange={handleSearchChange}\r\n        handleFilterChange={handleFilterChange}\r\n        handleSort={handleSort}\r\n        searchTerm={searchTerm}\r\n        filterValues={filterValues}\r\n        sortDirection={sortDirection}\r\n        sortColumn={sortColumn}\r\n      />\r\n\r\n      {visibleRows < totalRows &&\r\n        <ShowMore handleShowMore={handleShowMore} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InfiniteScrollTable;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,OAAO,EAAEC,MAAM,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAChF,SAASC,KAAK,EAAEC,IAAI,QAAS,iBAAiB;AAC9C,SAASC,IAAI,QAAQ,kBAAkB;AACvC,OAAOC,iBAAiB,MAAM,qBAAqB;AACnD,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAO,aAAa,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEtB,MAAMC,mBAAmB,GAAGC,IAAA,IAAc;EAAAC,EAAA;EAAA,IAAb;IAAEC;EAAK,CAAC,GAAAF,IAAA;EACnC,MAAM,CAACG,YAAY,EAAEC,eAAe,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACsB,OAAO,EAAEC,UAAU,CAAC,GAAGvB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACwB,YAAY,EAAEC,eAAe,CAAC,GAAGzB,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAAC0B,UAAU,EAAEC,aAAa,CAAC,GAAG3B,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAAC4B,aAAa,EAAEC,gBAAgB,CAAC,GAAG7B,QAAQ,CAAC,KAAK,CAAC;EACzD,MAAM,CAAC8B,YAAY,EAAEC,eAAe,CAAC,GAAG/B,QAAQ,CAAC,CAAC,CAAC,CAAC;EACpD,MAAM,CAACgC,UAAU,EAAEC,aAAa,CAAC,GAAGjC,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACkC,YAAY,EAAEC,eAAe,CAAC,GAAGnC,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACoC,OAAO,EAAEC,UAAU,CAAC,GAAGrC,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACsC,WAAW,EAAEC,cAAc,CAAC,GAAGvC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;EACnD,MAAM,CAACwC,SAAS,CAAC,GAAGxC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAElC,MAAMyC,QAAQ,GAAGvC,MAAM,CAAC,IAAI,CAAC;EAE7BC,SAAS,CAAC,MAAM;IACd,MAAMuC,QAAQ,GAAG,IAAIC,oBAAoB,CACtCC,OAAO,IAAK;MACXA,OAAO,CAACC,OAAO,CAAEC,KAAK,IAAK;QACzB,IAAIA,KAAK,CAACC,cAAc,IAAI,CAACX,OAAO,IAAIE,WAAW,GAAGE,SAAS,EAAE;UAC/D;UACAH,UAAU,CAAC,IAAI,CAAC;UAChBW,UAAU,CAAC,MAAM;YACf;YACAT,cAAc,CAAEU,eAAe,IAAKC,IAAI,CAACC,GAAG,CAACF,eAAe,GAAG,EAAE,EAAET,SAAS,CAAC,CAAC;YAC9EH,UAAU,CAAC,KAAK,CAAC;UACnB,CAAC,EAAE,IAAI,CAAC;QACV;MACF,CAAC,CAAC;IACJ,CAAC,EACD;MACEe,IAAI,EAAE,IAAI;MACVC,UAAU,EAAE,KAAK;MACjBC,SAAS,EAAE,GAAG,CAAE;IAClB,CACF,CAAC;;IAED,IAAIb,QAAQ,CAACc,OAAO,EAAE;MACpBb,QAAQ,CAACc,OAAO,CAACf,QAAQ,CAACc,OAAO,CAAC;IACpC;IAEA,OAAO,MAAM;MACX;MACAb,QAAQ,CAACe,UAAU,CAAC,CAAC;IACvB,CAAC;EACH,CAAC,EAAE,CAACnB,WAAW,EAAEE,SAAS,EAAEJ,OAAO,CAAC,CAAC;EAErC,MAAMM,QAAQ,GAAGxC,MAAM,CACrB,IAAIyC,oBAAoB,CACrBC,OAAO,IAAK;IACX,MAAMc,SAAS,GAAGd,OAAO,CAACA,OAAO,CAACe,MAAM,GAAG,CAAC,CAAC;IAC7C,IAAID,SAAS,CAACX,cAAc,IAAIzB,OAAO,EAAE;MACvCD,eAAe,CAAEuC,gBAAgB,IAAKV,IAAI,CAACC,GAAG,CAACS,gBAAgB,GAAG,EAAE,EAAEzC,IAAI,CAACwC,MAAM,CAAC,CAAC;IACrF;EACF,CAAC,EACD;IAAEL,SAAS,EAAE;EAAE,CACjB,CACF,CAAC;EAED,MAAMO,UAAU,GAAGzD,WAAW,CAC3B0D,IAAI,IAAK;IACR,IAAIA,IAAI,KAAK,IAAI,EAAE;MACjBpB,QAAQ,CAACa,OAAO,CAACC,OAAO,CAACM,IAAI,CAAC;IAChC;EACF,CAAC,EACD,CAACpB,QAAQ,CACX,CAAC;EAED,MAAMqB,oBAAoB,GAAIC,EAAE,IAAK;IACnC,MAAMC,mBAAmB,GAAGzC,YAAY,CAAC0C,QAAQ,CAACF,EAAE,CAAC,GACjDxC,YAAY,CAAC2C,MAAM,CAAEC,KAAK,IAAKA,KAAK,KAAKJ,EAAE,CAAC,GAC5C,CAAC,GAAGxC,YAAY,EAAEwC,EAAE,CAAC;IACzBvC,eAAe,CAACwC,mBAAmB,CAAC;EACtC,CAAC;EAED,MAAMI,UAAU,GAAIC,MAAM,IAAK;IAC7B3C,aAAa,CAAC2C,MAAM,CAAC;IACrBzC,gBAAgB,CAAE0C,aAAa,IAAMA,aAAa,KAAK,KAAK,GAAG,MAAM,GAAG,KAAM,CAAC;EACjF,CAAC;EAED,MAAMC,kBAAkB,GAAGA,CAACF,MAAM,EAAEG,KAAK,KAAK;IAC5C1C,eAAe,CAAE2C,UAAU,KAAM;MAAE,GAAGA,UAAU;MAAE,CAACJ,MAAM,GAAGG;IAAM,CAAC,CAAC,CAAC;EACvE,CAAC;EAED,MAAME,kBAAkB,GAAIF,KAAK,IAAK;IACpCxC,aAAa,CAACwC,KAAK,CAAC;EACtB,CAAC;EAED,MAAMG,qBAAqB,GAAG3E,OAAO,CAAC,MAAM;IAC1C,IAAI4E,YAAY,GAAG1D,IAAI,CAAC2D,KAAK,CAAC,CAAC,EAAE1D,YAAY,CAAC,CAAC+C,MAAM,CAAEY,IAAI,IACzDC,MAAM,CAACpC,OAAO,CAACd,YAAY,CAAC,CAACmD,KAAK,CAACC,KAAA;MAAA,IAAC,CAACC,GAAG,EAAEC,WAAW,CAAC,GAAAF,KAAA;MAAA,OACpDE,WAAW,GAAGC,MAAM,CAACN,IAAI,CAACI,GAAG,CAAC,CAAC,CAACjB,QAAQ,CAACkB,WAAW,CAAC,GAAG,IAAI;IAAA,CAC9D,CACF,CAAC;IAEDP,YAAY,GAAGA,YAAY,CAACV,MAAM,CAAEY,IAAI,IACtCC,MAAM,CAACM,MAAM,CAACP,IAAI,CAAC,CAACQ,IAAI,CAAEC,GAAG,IAC3BH,MAAM,CAACG,GAAG,CAAC,CAACC,WAAW,CAAC,CAAC,CAACvB,QAAQ,CAAClC,UAAU,CAACyD,WAAW,CAAC,CAAC,CAC7D,CACF,CAAC;IAED,IAAI/D,UAAU,EAAE;MACdmD,YAAY,CAACa,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;QAC1B,MAAMC,MAAM,GAAGF,CAAC,CAACjE,UAAU,CAAC;QAC5B,MAAMoE,MAAM,GAAGF,CAAC,CAAClE,UAAU,CAAC;QAC5B,MAAMqE,KAAK,GAAGnE,aAAa,KAAK,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC;QAE9C,IAAI,OAAOiE,MAAM,KAAK,QAAQ,IAAI,OAAOC,MAAM,KAAK,QAAQ,EAAE;UAC5D,OAAOD,MAAM,CAACG,aAAa,CAACF,MAAM,CAAC,GAAGC,KAAK;QAC7C,CAAC,MAAM;UACL,OAAO,CAACF,MAAM,GAAGC,MAAM,IAAIC,KAAK;QAClC;MACF,CAAC,CAAC;IACJ;IAEA,OAAOlB,YAAY;EACrB,CAAC,EAAE,CAAC1D,IAAI,EAAEC,YAAY,EAAEU,YAAY,EAAEJ,UAAU,EAAEE,aAAa,EAAEI,UAAU,CAAC,CAAC;EAE7E,MAAMiE,qBAAqB,GAAIC,MAAM,IAAK;IACxC;IACAC,OAAO,CAACC,GAAG,CAAE,cAAaF,MAAO,0BAAyB,CAAC;EAC7D,CAAC;EAED,MAAMG,cAAc,GAAGA,CAAA,KAAM;IAC3B;IACA9D,cAAc,CAAEU,eAAe,IAAKA,eAAe,GAAG,EAAE,CAAC;EAC3D,CAAC;EACD,MAAMqD,cAAc,GAAItC,EAAE,IAAK;IAC7B7B,eAAe,CAAEoE,gBAAgB,IAC/BA,gBAAgB,CAACrC,QAAQ,CAACF,EAAE,CAAC,GACzBuC,gBAAgB,CAACpC,MAAM,CAAEC,KAAK,IAAKA,KAAK,KAAKJ,EAAE,CAAC,GAChD,CAAC,GAAGuC,gBAAgB,EAAEvC,EAAE,CAC9B,CAAC;EACH,CAAC;EAED,oBACEnD,OAAA;IAAK2F,SAAS,EAAC,iCAAiC;IAAAC,QAAA,gBAC9C5F,OAAA;MAAK2F,SAAS,EAAC,cAAc;MAACE,GAAG,EAAEjE,QAAS;MAAAgE,QAAA,gBAC1C5F,OAAA,CAACR,KAAK;QAACsG,OAAO;QAACC,QAAQ;QAACC,KAAK;QAAAJ,QAAA,gBAC3B5F,OAAA;UAAO2F,SAAS,EAAC,YAAY;UAAAC,QAAA,eAC3B5F,OAAA;YAAA4F,QAAA,gBACE5F,OAAA;cAAA4F,QAAA,eACE5F,OAAA,CAACP,IAAI,CAACwG,KAAK;gBACTC,IAAI,EAAC,UAAU;gBACfC,KAAK,EAAC,EAAE;gBACRC,OAAO,EAAEzF,YAAY,CAACmC,MAAM,KAAKvC,YAAa;gBAC9C8F,QAAQ,EAAEA,CAAA,KAAMnD,oBAAoB,CAAC,WAAW;cAAE;gBAAAoD,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACnD;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACA,CAAC,eACLzG,OAAA;cAAI0G,OAAO,EAAEA,CAAA,KAAMlD,UAAU,CAAC,IAAI,CAAE;cAAAoC,QAAA,EAAC;YAAE;cAAAU,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eAC5CzG,OAAA;cAAI0G,OAAO,EAAEA,CAAA,KAAMlD,UAAU,CAAC,MAAM,CAAE;cAAAoC,QAAA,EAAC;YAAI;cAAAU,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAE9C;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA,CAAC,eACRzG,OAAA;UAAA4F,QAAA,EACG7B,qBAAqB,CAACE,KAAK,CAAC,CAAC,EAAExC,WAAW,CAAC,CAACkF,GAAG,CAAC,CAACzC,IAAI,EAAE0C,KAAK,KAAK;YAChE,IAAIA,KAAK,KAAKrG,YAAY,GAAG,CAAC,EAAE;cAC9B,oBACEP,OAAA;gBAAkB6F,GAAG,EAAE7C,UAAW;gBAAA4C,QAAA,gBAChC5F,OAAA;kBAAA4F,QAAA,eACE5F,OAAA,CAACP,IAAI,CAACwG,KAAK;oBACTC,IAAI,EAAC,UAAU;oBACfC,KAAK,EAAC,EAAE;oBACRC,OAAO,EAAEzF,YAAY,CAAC0C,QAAQ,CAACa,IAAI,CAACf,EAAE,CAAE;oBACxCkD,QAAQ,EAAEA,CAAA,KAAMnD,oBAAoB,CAACgB,IAAI,CAACf,EAAE;kBAAE;oBAAAmD,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAC/C;gBAAC;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACA,CAAC,eACLzG,OAAA;kBAAA4F,QAAA,EAAK1B,IAAI,CAACf;gBAAE;kBAAAmD,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAK,CAAC,eAClBzG,OAAA;kBAAA4F,QAAA,EAAK1B,IAAI,CAAC2C;gBAAI;kBAAAP,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAK,CAAC,eACpBzG,OAAA;kBAAA4F,QAAA,eACE5F,OAAA,CAACN,IAAI;oBAACoH,EAAE,EAAE5C,IAAI,CAAC6C,SAAU;oBAAAnB,QAAA,EAAE1B,IAAI,CAACf;kBAAE;oBAAAmD,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAO;gBAAC;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACxC,CAAC;cAAA,GAbEvC,IAAI,CAACf,EAAE;gBAAAmD,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAeZ,CAAC;YAET,CAAC,MAAM;cACL,oBACEzG,OAAA,CAAAE,SAAA;gBAAA0F,QAAA,gBACE5F,OAAA;kBAAA4F,QAAA,gBACE5F,OAAA;oBAAA4F,QAAA,eACE5F,OAAA,CAACP,IAAI,CAACwG,KAAK;sBACTC,IAAI,EAAC,UAAU;sBACfC,KAAK,EAAC,EAAE;sBACRC,OAAO,EAAEzF,YAAY,CAAC0C,QAAQ,CAACa,IAAI,CAACf,EAAE,CAAE;sBACxCkD,QAAQ,EAAEA,CAAA,KAAMnD,oBAAoB,CAACgB,IAAI,CAACf,EAAE;oBAAE;sBAAAmD,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAC/C;kBAAC;oBAAAH,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACA,CAAC,eACLzG,OAAA;oBAAA4F,QAAA,EAAK1B,IAAI,CAACf;kBAAE;oBAAAmD,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAK,CAAC,eAClBzG,OAAA;oBAAA4F,QAAA,EAAK1B,IAAI,CAAC2C;kBAAI;oBAAAP,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAK,CAAC,eACpBzG,OAAA;oBAAA4F,QAAA,eACE5F,OAAA,CAACL,iBAAiB;sBAACqH,eAAe,EAAE5B;oBAAsB;sBAAAkB,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAE;kBAAC;oBAAAH,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAC3D,CAAC,eACLzG,OAAA;oBAAA4F,QAAA,eACE5F,OAAA,CAACJ,QAAQ;sBACPqH,QAAQ,EAAEA,CAAA,KAAMxB,cAAc,CAACvB,IAAI,CAACf,EAAE,CAAE;sBACxC+D,QAAQ,EAAE7F,YAAY,CAACgC,QAAQ,CAACa,IAAI,CAACf,EAAE;oBAAE;sBAAAmD,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAC1C;kBAAC;oBAAAH,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACA,CAAC;gBAAA,GAnBEvC,IAAI,CAACf,EAAE;kBAAAmD,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAoBZ,CAAC,EACJpF,YAAY,CAACgC,QAAQ,CAACa,IAAI,CAACf,EAAE,CAAC,iBAC7BnD,OAAA;kBAAA4F,QAAA,eACE5F,OAAA;oBAAImH,OAAO,EAAE,CAAE;oBAAAvB,QAAA,EAEZ1B,IAAI,CAACkD;kBAAiB;oBAAAd,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACrB;gBAAC;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACH,CACL;cAAA,eACD,CAAC;YAEP;UACF,CAAC;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACG,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEH,CAAC,EACPlF,OAAO,iBACJvB,OAAA;QAAA4F,QAAA,eACE5F,OAAA;UAAA4F,QAAA,eACE5F,OAAA;YAAImH,OAAO,EAAE,CAAE;YAAAvB,QAAA,EAAC;UAAe;YAAAU,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAClC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CACR;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,eACNzG,OAAA,CAACF,MAAM;MACLQ,IAAI,EAAEA,IAAK;MACXwD,kBAAkB,EAAEA,kBAAmB;MACvCH,kBAAkB,EAAEA,kBAAmB;MACvCH,UAAU,EAAEA,UAAW;MACvBrC,UAAU,EAAEA,UAAW;MACvBF,YAAY,EAAEA,YAAa;MAC3BF,aAAa,EAAEA,aAAc;MAC7BF,UAAU,EAAEA;IAAW;MAAAyF,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxB,CAAC,EAEDhF,WAAW,GAAGE,SAAS,iBACtB3B,OAAA,CAACH,QAAQ;MAAC2F,cAAc,EAAEA;IAAe;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3C,CAAC;AAEV,CAAC;AAACpG,EAAA,CA7OIF,mBAAmB;AAAAkH,EAAA,GAAnBlH,mBAAmB;AA+OzB,eAAeA,mBAAmB;AAAC,IAAAkH,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}